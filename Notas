<!DOCTYPE html>
<html>
<head>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.8.335/pdf.min.js"></script>
  <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
</head>
<body>

<input type="file" id="pdfInput" accept=".pdf">
<div id="outputImages"></div>

<script>
document.getElementById('pdfInput').addEventListener('change', function(e) {
  const file = e.target.files[0];
  
  if (file) {
    const reader = new FileReader();
    
    reader.onload = function(event) {
      const arrayBuffer = event.target.result;
      const loadingTask = pdfjsLib.getDocument(arrayBuffer);
      
      loadingTask.promise.then(function(pdf) {
        const outputContainer = document.getElementById('outputImages');
        
        for (let pageNumber = 1; pageNumber <= pdf.numPages; pageNumber++) {
          pdf.getPage(pageNumber).then(function(page) {
            const canvas = document.createElement('canvas');
            const scale = 1.5;
            const viewport = page.getViewport({ scale });
            const context = canvas.getContext('2d');
            
            canvas.width = viewport.width;
            canvas.height = viewport.height;
            
            const renderContext = {
              canvasContext: context,
              viewport: viewport
            };
            
            page.render(renderContext).promise.then(function() {
              const image = new Image();
              image.src = canvas.toDataURL('image/jpeg'); // You can also use 'image/png'
              outputContainer.appendChild(image);
            });
          });
        }
      });
    };
    
    reader.readAsArrayBuffer(file);
  }
});
</script>

</body>
</html>





----------------------------------------------------------------------------------------------

Modificacion JSON


<!DOCTYPE html>
<html>
<head>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.8.335/pdf.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/tesseract.js"></script>
</head>
<body>

<input type="file" id="pdfInput" accept=".pdf">
<div id="outputImages"></div>

<script>
document.getElementById('pdfInput').addEventListener('change', function(e) {
  const file = e.target.files[0];
  
  if (file) {
    const reader = new FileReader();
    
    reader.onload = async function(event) {
      const arrayBuffer = event.target.result;
      const loadingTask = pdfjsLib.getDocument(arrayBuffer);
      
      loadingTask.promise.then(async function(pdf) {
        const resultObj = {}; // Crear un objeto JSON para almacenar los resultados
        
        for (let pageNumber = 1; pageNumber <= pdf.numPages; pageNumber++) {
          const page = await pdf.getPage(pageNumber);
          const viewport = page.getViewport({ scale: 1.5 });
          
          const canvas = document.createElement('canvas');
          const context = canvas.getContext('2d');
          canvas.width = viewport.width;
          canvas.height = viewport.height;
          const renderContext = {
            canvasContext: context,
            viewport: viewport
          };
          
          await page.render(renderContext).promise;
          
          const imgDataUrl = canvas.toDataURL('image/png');
          
          // Realizar OCR en la imagen utilizando tesseract.js
          const result = await Tesseract.recognize(imgDataUrl);
          
          // Procesar y organizar los resultados del OCR
          const processedResult = processAndOrganizeResult(result.data.text);
          
          // Agregar el resultado procesado al objeto JSON
          resultObj[`page_${pageNumber}`] = processedResult;
        }
        
        // Imprimir el objeto JSON organizado en la consola
        console.log(JSON.stringify(resultObj, null, 2));
      });
    };
    
    reader.readAsArrayBuffer(file);
  }
});

function processAndOrganizeResult(ocrText) {
  // Procesar y organizar el texto del OCR según tus necesidades
  // Por ejemplo, dividir en secciones por saltos de línea
  const sections = ocrText.split('\n');
  
  // Construir el objeto JSON con los resultados procesados
  const processedResult = {
    content: ocrText.trim(),
    sections: sections
  };
  
  return processedResult;
}
</script>

</body>
</html>




----------------------------------------------------------------------------------------------
16/08/2023

<!DOCTYPE html>
<html>
<head>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.8.335/pdf.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/tesseract.js"></script>
</head>
<body>

<input type="file" id="fileInput" accept=".pdf, image/*">

<script>
document.getElementById('fileInput').addEventListener('change', async function(e) {
  const file = e.target.files[0];

  if (file) {
    const reader = new FileReader();

    reader.onload = async function(event) {
      const arrayBuffer = event.target.result;

      // Detectar si es un PDF o una imagen
      const fileType = file.type;
      if (fileType === 'application/pdf') {
        await processPDF(arrayBuffer);
      } else if (fileType.startsWith('image/')) {
        await processImage(arrayBuffer);
      }
    };

    reader.readAsArrayBuffer(file);
  }
});

async function processPDF(arrayBuffer) {
  const loadingTask = pdfjsLib.getDocument(arrayBuffer);

  loadingTask.promise.then(async function(pdf) {
    const resultObj = {};

    for (let pageNumber = 1; pageNumber <= pdf.numPages; pageNumber++) {
      const page = await pdf.getPage(pageNumber);
      const viewport = page.getViewport({ scale: 1.5 });

      const canvas = document.createElement('canvas');
      const context = canvas.getContext('2d');
      canvas.width = viewport.width;
      canvas.height = viewport.height;
      const renderContext = {
        canvasContext: context,
        viewport: viewport,
      };

      await page.render(renderContext).promise;

      const imgDataUrl = canvas.toDataURL('image/png');
      const result = await Tesseract.recognize(imgDataUrl);

      console.log(`Texto escaneado por OCR en página ${pageNumber}:`);
      console.log(result.data.text);

      resultObj[`page_${pageNumber}`] = { image: imgDataUrl, result: result.data.text };
    }

    displayResults(resultObj);
  });
}

async function processImage(arrayBuffer) {
  const imgDataUrl = `data:image/jpeg;base64,${btoa(new Uint8Array(arrayBuffer).reduce((data, byte) => data + String.fromCharCode(byte), ''))}`;
  const result = await Tesseract.recognize(imgDataUrl);

  console.log('Texto escaneado por OCR:');
  console.log(result.data.text);

  const resultObj = {
    image: imgDataUrl,
    result: result.data.text,
  };

  displayResults({ single_image: resultObj });
}

function displayResults(results) {
  const invoices = {}; // Objeto para almacenar las facturas

  for (const key in results) {
    const resultData = results[key];
    const invoiceData = extractInvoiceData(resultData.result); // Extraer datos de la factura
    invoices[key] = invoiceData;
  }

  // Mostrar el objeto JSON en la consola
  console.log('Objeto JSON:');
  console.log(JSON.stringify(invoices, null, 2));
}

function extractInvoiceData(ocrText) {
  const lines = ocrText.split('\n');
  const invoice = {
    empresa: lines[0],
    direccion: lines[1],
    factura: lines[2],
    cliente: lines[3],
    direccion_cliente: lines[4],
    numero_pedido: lines[5],
    fecha_vencimiento: lines[6],
    items: [],
    subtotal: "",
    iva: "",
    total: "",
    condiciones_pago: ""
  };

  // ... (resto del procesamiento similar al código original) ...

  return invoice;
}
</script>

</body>
</html>
